跨域请求测试教程：https://www.cnblogs.com/vandusty/p/11408422.html

前后端分离是目前的趋势， 解决跨域问题也是老生常谈的话题了，我们了解一下什么是域和跨域。

域：协议 + 域名 + 端口；三者完全相同则为同域，反之有其一不同均为不同域。

跨域请求：当前【发起请求】的域和【请求指向】的域属于不同域时，该次请求称之为跨域请求。


跨域问题：
同一域名下允许通信
同一域名下不同文件夹允许通信
同一域名不同端口不允许通信
同一域名不同协议不允许通信
域名和域名对应IP不允许通信
主域名相同，子域名不同不允许通信
同一域名，不同二级域名不允许通信
不同域名不允许通信

--------------------------------

##首先我门要知道什么是跨域：

跨域是指 不同域名之间相互访问。跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。

也就是如果在A网站中，我们希望使用Ajax来获得B网站中的特定内容
如果A网站与B网站不在同一个域中，那么就出现了跨域访问问题。

##什么是同一个域？
同一协议，同一ip，同一端口，三同中有一不同就产生了跨域。

#前端解决跨域：
前边也说了，跨域是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。
解决：
所以搞一个node 服务器做代理，发出请求到node 服务器，node服务器转发到后端就可以绕过跨域问题。

#后端解决跨域问题：
后端解决就比较简单了。例如我用的springboot，只用在Controller类上添加一个“@CrossOrigin“注解就可以实现对当前controller 的跨域 访问了，当然这个标签也可以加到方法上。

-------------------------------------------

一、同源策略简介
同源策略[same origin policy]：是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。

源[origin]就是协议、域名和端口号。例如：http://www.baidu.com:80这个URL。

同源：若地址里面的协议、域名和端口号均相同则属于同源。

那些操作不受同源策略影响：

页面中的链接，重定向以及表单提交是不会受到同源策略限制的；
跨域资源的引入也是可以的。但是JS不能读写加载的内容。如嵌入到页面中的
<script src="..."></script>，<img>，<link>，<iframe>
跨域：受前面所讲的浏览器同源策略的影响，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象就需要跨域。 在同源策略的限制下，非同源的网站之间不能发送 AJAX 请求。

-------------------------------

Access-Control-Allow-Origin 表示允许哪些原始域进行跨域访问。

Access-Control-Allow-Credentials表示是否允许客户端获取用户凭据。

Access-Control-Allow-Methods 表示允许哪些跨域请求的提交方式。（例如GET/POST）

Access-Control-Expose-Headers 表示允许暴露哪些头部信息给客户端。

Access-Control-Max-Age 表示预检请求 [Preflight Request] 的最大缓存时间。
